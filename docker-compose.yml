version: '3.7'

services:
  vue:
    build:
      context: ./myga_front
      dockerfile: dockerfile-vue
    ports:
      - "${VUE_PORT}:5173"
    volumes:
      - vue_build:/dist
    command: ["npm", "run", "dev", "--", "--host"]

  vue-canary:
    build:
      context: ./myga_front
      dockerfile: dockerfile-vue
    ports:
      - "${VUE_CANARY_PORT}:5173"
    volumes:
      - vue_build:/dist
    command: [ "npm", "run", "dev", "--", "--host" ]

  spring:
    build:
      context: ./myga_back
      dockerfile: dockerfile-spring
    ports:
      - "${SPRING_PORT}:${SPRING_PORT}"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DB_HOST=mysql-primary
      - DB_PORT=${DB_PORT}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}

  spring-canary:
    build:
      context: ./myga_back
      dockerfile: dockerfile-spring
    ports:
      - "${SPRING_CANARY_PORT}:8037"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DB_HOST=mysql-primary
      - DB_PORT=${DB_PORT}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /home/ubuntu/myga/nginx/nginx.conf:/etc/nginx/nginx.conf
      - /home/ubuntu/myga/nginx/conf.d:/etc/nginx/conf.d
      - /home/ubuntu/myga/certbot/conf:/etc/letsencrypt
      - /home/ubuntu/myga/certbot/www:/var/www/certbot

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /home/ubuntu/myga/certbot/www:/var/www/certbot
      - /home/ubuntu/myga/certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h; done'"

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
  # Primary MySQL
  mysql-primary:
    image: mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_primary_data:/var/lib/mysql
    ports:
      - "${DB_PORT}:3306"
    command: --server-id=1 --log-bin=mysql-bin

  # Replica MySQL (Read-only)
  mysql-replica:
    image: mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_replica_data:/var/lib/mysql
    ports:
      - "${MYSQL_REPLICA_PORT}:3306"
    command: --server-id=2 --log-bin=mysql-bin --relay-log=mysql-relay-bin
    depends_on:
      - mysql-primary
    entrypoint:
      - /bin/bash
      - -c
      - |
        mysqld & \
        until mysqladmin ping -h127.0.0.1 --silent; do
          echo 'Waiting for MySQL to start...'
          sleep 2
        done && \
        mysql -u root -p$MYSQL_ROOT_PASSWORD -e "CHANGE MASTER TO MASTER_HOST='mysql-primary', MASTER_USER='root', MASTER_PASSWORD='$MYSQL_ROOT_PASSWORD', MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS= 4;" && \
        mysql -u root -p$MYSQL_ROOT_PASSWORD -e "START SLAVE;" && \
        tail -f /dev/null
#service 명령어는 대부분의 리눅스에서 시스템 서비스를 관리하기 위해 사용되지만, MySQL Docker 이미지에는 기본적으로 포함되지 않을 수 있다.

volumes:
  vue_build:
  mysql_primary_data:
  mysql_replica_data:
