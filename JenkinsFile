pipeline {
    agent any

    environment {
        GIT_CREDENTIALS_ID = 'myga_github'
        GIT_URL = 'https://github.com/JakeKim4926/myga.git'
    }
    // test
    stages {
        stage('Pull Code') {
            steps {
                script {
                    // Checkout the code from GitHub
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/release']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDENTIALS_ID}", url: "${GIT_URL}"]]
                    ])
                }

                // Canary 브랜치로 체크아웃되면 Canary 배포
                if (env.GIT_BRANCH == 'origin/release-canary') {
                    env.CANARY_DEPLOY = true
                }
            }
        }

        stage('build Vue') {
            steps {
                script {
                    // Build and deploy Vue application
                    sh 'docker-compose up -d --build vue'
                }
            }
        }

        stage('build Spring') {
            steps {
                script {
                    // Build and deploy Spring application
                    sh 'docker-compose up -d --build spring'
                }
            }
        }

        stage('build Vue Canary') {
            when {
                expression { env.CANARY_DEPLOY == 'true' }
            }
            steps {
                script {
                    sh 'docker-compose up -d --build vue-canary'
                }
            }
        }

        stage('build Spring Canary') {
            when {
                expression { env.CANARY_DEPLOY == 'true' }
            }
            steps {
                script {
                    sh 'docker-compose up -d --build spring-canary'
                }
            }
        }

        stage('update nginx') {
            steps {
                script {
                    // Update Nginx
                    sh 'docker exec nginx nginx -s reload'
                }
            }
        }
    }

    post {
           success {
               echo 'Deployment completed successfully!'
           }

           failure {
               echo 'Deployment failed!'
           }
    }
}
